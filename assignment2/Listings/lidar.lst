C166 COMPILER V7.57.0, LIDAR                                                               10/06/2022 20:25:54 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE LIDAR
OBJECT MODULE PLACED IN .\Objects\lidar.obj
COMPILER INVOKED BY: D:\Keil\C166\BIN\C166.EXE Source\lidar.c BROWSE MOD167 DEBUG PRINT(.\Listings\lidar.lst) TABS(2) OB
                    -JECT(.\Objects\lidar.obj) 

 stmt lvl     source

    1         // a1793769 - Emily Zhang
    2         /**
    3         Function implementation for operations related to the LIDAR 
    4         **/
    5         
    6         /* Include required submodules */
    7         #include "lidar.h"
    8         
    9         /********** Function Definitions **********/
   10         
   11         /*void lidarGetDistances (float* array, unsigned int array_size)
   12         {
   13           float raw_lidar_output = 0;
   14           float interpolated_result = 0; 
   15           unsigned int index = 0;
   16           unsigned int toggle = 0;
   17         
   18           // collect first result
   19           raw_lidar_output = adcRead(LIDAR_PIN, FIXED_SINGLE);
   20           interpolated_result = (raw_lidar_output * LIDAR_STEP_SIZE) + 5;
   21           array[index] = interpolated_result;
   22           index++;
   23         
   24           // if array not full yet
   25           while (index < (array_size))
   26           {
   27             // wait 10ms before collect next distance
   28             timerT6StartMS(10);
   29             while(T6OTL == toggle){}
   30             toggle = !toggle;
   31             T6R = 0;
   32         
   33             // collect/calculate lidar distance
   34             raw_lidar_output = adcRead(LIDAR_PIN, FIXED_SINGLE);
   35             interpolated_result = (raw_lidar_output * LIDAR_STEP_SIZE) + 5;
   36         
   37             // store distance
   38             array[index] = interpolated_result;
   39             index++;
   40           }
   41         
   42           return;
   43         }*/
   44         
   45         /*float* lidarSetupBuffer(void)
   46         {
   47           float distance_buffer[BUFFER_SIZE] = {0};
   48         
   49           return &distance_buffer;
   50         }*/
   51         
   52         void lidarT6Interrupt (void) interrupt 0x26
   53         {
   54  1        T6R = 0;  // stop timer T6
C166 COMPILER V7.57.0, LIDAR                                                               10/06/2022 20:25:54 PAGE 2   

   55  1        g_wait_flag = 0;  // lower flag, indicate "take next measurement!"
   56  1      }
   57         void lidarTimerInit(void)
   58         {
   59  1        timerT6Config(GPT_2_PRESC_4, TIMER_MODE, COUNT_DOWN);
   60  1        timerT6EnableInterrupt();
   61  1      }
   62         
   63         float lidarGetResult(void)
   64         {
   65  1        float raw_lidar_output = 0;
   66  1        float interpolated_result = 0; 
   67  1      
   68  1        // collect and return result
   69  1        raw_lidar_output = adcRead(LIDAR_PIN, FIXED_SINGLE);
   70  1        interpolated_result = (raw_lidar_output * LIDAR_STEP_SIZE) + 5;
   71  1        
   72  1        return interpolated_result;
   73  1      }
   74         
   75         void lidarUpdateBuffer(void)
   76         {
   77  1        float lidar_result = lidarGetResult();
   78  1      
   79  1        interruptDisable(); // disable interrupts for now
   80  1        pop_front(g_dist_buffer, BUFFER_SIZE);
   81  1        push_back(g_dist_buffer, BUFFER_SIZE, lidar_result);
   82  1        g_wait_flag = 1;    // raise flag, indicates "measurement taken"
   83  1      
   84  1        interruptEnable(); // re-enable interrupts
   85  1        
   86  1        timerT6StartMS(10);   // start 10ms timer
   87  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         162     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
