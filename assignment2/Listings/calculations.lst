C166 COMPILER V7.57.0, CALCULATIONS                                                        10/06/2022 10:51:25 PAGE 1   


C166 COMPILER V7.57.0, COMPILATION OF MODULE CALCULATIONS
OBJECT MODULE PLACED IN .\Objects\calculations.obj
COMPILER INVOKED BY: D:\Keil\C166\BIN\C166.EXE Source\calculations.c BROWSE MOD167 DEBUG PRINT(.\Listings\calculations.l
                    -st) TABS(2) OBJECT(.\Objects\calculations.obj) 

 stmt lvl     source

    1         // a1793769 - Emily Zhang
    2         /**
    3         Implementation for operations that perfrom the main
    4         torque & braking distance calculations 
    5         **/
    6         
    7         #include <reg167.h>
    8         #include "calculations.h"
    9         
   10         /********** Function Declearations **********/
   11         
   12         // v = Rw
   13         float calculateVehicleLinVel(float wheel_ang_vel)
   14         {
   15  1        float result = ROLLING_RADIUS * wheel_ang_vel;
   16  1        return result;
   17  1      }
   18         
   19         // s = 0.36v + 0.1v^2
   20         float calculateMinBrkDist(float vehicle_lin_vel)
   21         {
   22  1        float result = (0.36 * vehicle_lin_vel) +
   23  1           (0.1 * (vehicle_lin_vel * vehicle_lin_vel));
   24  1        return result;
   25  1      }
   26         
   27         float calculateRelativeVel(float* distance_buffer, unsigned int buffer_size)
   28         {
   29  1        float result = 0.5 * (distance_buffer[buffer_size - 1] -
   30  1           distance_buffer[0]);
   31  1        return result;
   32  1      }
   33         
   34         float calculateBrakingTorque(float vehicle_lin_vel, float dist_to_obst)
   35         {
   36  1        float deceleration = 0;
   37  1        float wheel_ang_acc = 0;
   38  1        float est_brk_force = 0;
   39  1        float braking_torque = 0;
   40  1      
   41  1        // a = -(v^2)/(2d)
   42  1        deceleration = -(vehicle_lin_vel * vehicle_lin_vel)/(2 * dist_to_obst);
   43  1      
   44  1        // wheel_ang_acc = a/R
   45  1        wheel_ang_acc = deceleration/ROLLING_RADIUS;
   46  1      
   47  1        // ma = -F, F = -ma
   48  1        est_brk_force = -(deceleration * QTR_CAR_MASS);
   49  1      
   50  1        // T = F*R+J(wheel_ang_acc)
   51  1        braking_torque = (est_brk_force * ROLLING_RADIUS) + 
   52  1          (MOMENT_OF_INERTIA * wheel_ang_acc);
   53  1      
   54  1        return braking_torque;
C166 COMPILER V7.57.0, CALCULATIONS                                                        10/06/2022 10:51:25 PAGE 2   

   55  1      }
   56         
   57         void calculationsHandler(float* buffer)
   58         {
   59  1        volatile float angular_velocity = 0;
   60  1        volatile float linear_velocity = 0;
   61  1        volatile float min_distance = 0;
   62  1        volatile float relative_velocity = 0;
   63  1        volatile float braking_torque = 0;
   64  1      
   65  1        // First, get vehicle linear velocity
   66  1        angular_velocity = encoderGetVelocity();
   67  1        linear_velocity = calculateVehicleLinVel(angular_velocity);
   68  1      
   69  1        // Then check minimum braking distance
   70  1        min_distance = calculateMinBrkDist(linear_velocity);
   71  1      
   72  1        // Also check relative velocity
   73  1        relative_velocity = calculateRelativeVel(buffer, BUFFER_SIZE);
   74  1      
   75  1        // Send warning?
   76  1        if ((min_distance > buffer[1]) && (relative_velocity < 0))
   77  1        {
   78  2          // send warning
   79  2          aebWarning();
   80  2        }
   81  1      
   82  1        // Calculate relative braking torque
   83  1        braking_torque = calculateBrakingTorque(linear_velocity, buffer[1]);
   84  1      
   85  1        // Send warning?
   86  1        if ((braking_torque > MAX_BRAKE_TORQUE) && (relative_velocity < 0))
   87  1        {
   88  2          // send warning
   89  2          aebWarning();
   90  2        }
   91  1        else if (braking_torque == 0x00)
   92  1        {
   93  2          dacWrite(0x01);
   94  2        }
   95  1        else
   96  1        {
   97  2          dacWrite(braking_torque * DAC_SCALE_FACTOR);
   98  2        }
   99  1      }


MODULE INFORMATION:   INITIALIZED  UNINITIALIZED
  CODE SIZE        =         652     --------
  NEAR-CONST SIZE  =    --------     --------
  FAR-CONST SIZE   =    --------     --------
  HUGE-CONST SIZE  =    --------     --------
  XHUGE-CONST SIZE =    --------     --------
  NEAR-DATA SIZE   =    --------     --------
  FAR-DATA SIZE    =    --------     --------
  XHUGE-DATA SIZE  =    --------     --------
  IDATA-DATA SIZE  =    --------     --------
  SDATA-DATA SIZE  =    --------     --------
  BDATA-DATA SIZE  =    --------     --------
  HUGE-DATA SIZE   =    --------     --------
  BIT SIZE         =    --------     --------
  INIT'L SIZE      =    --------     --------
C166 COMPILER V7.57.0, CALCULATIONS                                                        10/06/2022 10:51:25 PAGE 3   

END OF MODULE INFORMATION.


C166 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
